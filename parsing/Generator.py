import os
import sys
sys.path.insert(0, '/workspace/sku3343/scva')
from parsing.SolidityToAST import solidity_to_ast
from parsing.AstToCFG import ast_to_cfg
from parsing.VizToDGL import viz_to_dgl
import dgl
#import graphviz

def generate(file_path, file_name, result_path, weakness):
    # if not os.path.exists(result_path):
    #     os.mkdir(result_path)
    #     os.mkdir(os.path.join(result_path, 'ast'))
    #     os.mkdir(os.path.join(result_path, 'cfg'))
    #     os.mkdir(os.path.join(result_path, 'preprocessed_ast'))\
    
    
    ast_dict = {}
    normalization_dict = eval(open(result_path + '/Normalization.txt', 'r').read())
    success_count = 0
    fail_count = 0
    
    
    ast_dict = solidity_to_ast(os.path.join(file_path, file_name))
    file_name = file_name.split('.')[0]
    for contract in ast_dict:
        try:
            viz_code = ast_to_cfg(ast_dict[contract])
            dgl_graph = viz_to_dgl(viz_code, normalization_dict)
            dgl.save_graphs('/workspace/sku3343/dataset/dgl_graph/{0}/{1}'.format(weakness, file_name + '_' + contract), dgl_graph)
            success_count += 1
        except Exception as e:
            print(e)
            fail_count += 1
    
    return success_count, fail_count
        
    
    # return viz_dict # 단어 임베딩을 위한 빈도수 체크 진행 시 viz_code만 반환


    # file_name = file_name.split('.')[0]
    # cfg = graphviz.Source(viz_code)
    # cfg.format = 'png'
    # cfg.render(filename=os.path.join(result_path, 'cfg/', file_name))
    
    # return dgl_
